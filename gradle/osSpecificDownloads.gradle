import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath "commons-io:commons-io:2.5"
	}
}

task downloadGeckoDriver {
	def outputFile = file("$buildDir/webdriver/geckodriver.tar.gz")
	inputs.property("geckodriver", geckoDriverVersion)
	outputs.file(outputFile)

	doLast {
		def driverOsFilenamePart
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			driverOsFilenamePart = "win64.zip"
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			driverOsFilenamePart = "macos.tar.gz"
		} else if (Os.isFamily(Os.FAMILY_UNIX)) {
			driverOsFilenamePart = "linux64.tar.gz"
		}
		FileUtils.copyURLToFile(new URL("https://github.com/mozilla/geckodriver/releases/download/v${geckoDriverVersion}/geckodriver-v${geckoDriverVersion}-${driverOsFilenamePart}"), outputFile)
	}
}

task unzipGeckoDriver(type: Copy) {
	def outputDir = file("$buildDir/webdriver/geckodriver")
	dependsOn downloadGeckoDriver
	outputs.dir(outputDir)

	if(Os.isFamily(Os.FAMILY_WINDOWS)){
		from(zipTree(downloadGeckoDriver.outputs.files.singleFile))
	}else{
		from(tarTree(downloadGeckoDriver.outputs.files.singleFile))
	}
	into(outputDir)
}

task downloadChromeDriver {
	def outputFile = file("$buildDir/webdriver/chromedriver.zip")
	inputs.property("chromeDriverVersion", chromeDriverVersion)
	outputs.file(outputFile)

	doLast {
		def driverOsFilenamePart
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			driverOsFilenamePart = "win32"
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			driverOsFilenamePart = "mac64"
		} else if (Os.isFamily(Os.FAMILY_UNIX)) {
			driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
		}
		FileUtils.copyURLToFile(new URL("http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"), outputFile)
	}
}

task unzipChromeDriver(type: Copy) {
	def outputDir = file("$buildDir/webdriver/chromedriver")
	dependsOn downloadChromeDriver
	outputs.dir(outputDir)

	from(zipTree(downloadChromeDriver.outputs.files.singleFile))
	into(outputDir)
}

task downloadIEDriver {
	def outputFile = file("$buildDir/webdriver/iedriver.zip")
	inputs.property("ieDriverVersion", ieDriverVersion)
	outputs.file(outputFile)

	doLast {
		FileUtils.copyURLToFile(new URL("http://selenium-release.storage.googleapis.com/${ieDriverVersion}/IEDriverServer_x64_${ieDriverVersion}.0.zip"), outputFile)
	}
}

task unzipIEDriver(type: Copy) {
	def outputDir = file("$buildDir/webdriver/iedriver")
	dependsOn downloadIEDriver
	outputs.dir(outputDir)

	from(zipTree(downloadIEDriver.outputs.files.singleFile))
	into(outputDir)
}